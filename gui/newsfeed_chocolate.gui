types NewsFeed {
  type newsfeed_chocolate_feed = window {
    parentanchor = bottom|right
    movable = "[Not(GetVariableSystem.Exists('newsfeed_window_locked'))]"
    resizable = "[Not(GetVariableSystem.Exists('newsfeed_window_locked'))]"
    size = { 600 400 }
    position = { 0 -80 }
    minimumsize = { 600 85 }
    maximumsize = { 600 9999 }
    allow_outside = yes
    alwaystransparent = "[GetVariableSystem.Exists('newsfeed_window_locked')]"

    using = Animation_ShowHide_Quick

    widget = {
      size = { 100% 100% }

      background = {
        visible = "[Not(GetVariableSystem.Exists('newsfeed_window_locked'))]"
        using = NewsFeed_Textured_Background
      }

      visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('newsfeed_recent_message_containers')))]"
      alwaystransparent = "[GetVariableSystem.Exists('newsfeed_window_locked')]"

      scrollarea = {
        size = { 100% 100% }

        alwaystransparent = "[GetVariableSystem.Exists('newsfeed_window_locked')]"

        scrollbarpolicy_horizontal = always_off

        scrollbar_vertical = {
          using = Scrollbar_Vertical
        }
        
        scrollwidget = {
          flowcontainer = {
            alwaystransparent = yes

            background = {
              visible = "[GetVariableSystem.Exists('newsfeed_window_locked')]"
              using = NewsFeed_Border_Background
            }

            margin_top = 20
            margin_left = 20
            direction = vertical
            layoutpolicy_horizontal = expanding
            flowcontainer = {
              direction = vertical
              allow_outside = yes
              layoutpolicy_horizontal = expanding
              
              datamodel = "[GetPlayer.MakeScope.GetList('newsfeed_recent_message_containers')]"
  
              item = {
                newsfeed_item = {}
              }
            }

            fixedgridbox = {
              allow_outside = yes
              maxhorizontalslots = 1
              maxverticalslots = 1000
              addrow = 85
              addcolumn = 1
              datamodel_reuse_widgets = no
              layoutpolicy_horizontal = expanding
              
              datamodel = "[GetPlayer.MakeScope.GetList('newsfeed_older_message_containers')]"
  
              item = {
                newsfeed_item = {}
              }
            }
          }
        }
      }
    }
    
    vbox = {
      layoutpolicy_vertical = expanding
      layoutpolicy_horizontal = expanding

      visible = "[And(IsDataModelEmpty(GetPlayer.MakeScope.GetList('newsfeed_recent_message_containers')), Not(GetVariableSystem.Exists('newsfeed_window_locked')))]"

      expand = {}

      text_multi = {
        max_width = 400
        autoresize = yes
        text = newsfeed_empty_text
        align = center
      }

      background = {
        using = NewsFeed_Textured_Background
      }

      expand = {}
    }

    newsfeed_toolbar = {}
  }

  type newsfeed_item = flowcontainer {
    margin_right = 20
    
    button = {
      visible = "[GetVariableSystem.Exists('newsfeed_window_locked')]"
      size = { 100% 100% }
    }

    flowcontainer = {
      margin_bottom = 20
      direction = vertical
      allow_outside = yes

      flowcontainer = {
        allow_outside = yes
        ignoreinvisible = yes

        newsfeed_icon_area = {}
        newsfeed_title_area = {}
      }

      newsfeed_description_area = {}
    }

    newsfeed_portraits = {
      visible = "[Not(GetVariableSystem.Exists('newsfeed_disable_portraits'))]"
    }
  }

  type newsfeed_dismiss_button = button_clear {
    size = { 20 20 }

    onclick = "[GetScriptedGui('newsfeed_delete_message_gui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'newsfeed_message_index', MakeScopeValue(Scope.GetVariable('newsfeed_message_index').GetValue) ).End )]"
    onrightclick = "[GetScriptedGui('newsfeed_delete_all_messages_gui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
    button_ignore = none

    tooltip = MESSAGE_CLEAR_ALL_TOOLTIP

    tooltipwidget = {
      using = TooltipWithFakeShortcut
      blockoverride "shortcut_text" {
        raw_text = F
#        text = F
        default_format = "#bold"
      }
    }
  }

  type newsfeed_icon_area = widget {
    size = { 24 20 }
  
    state = {
      name = _mouse_hierarchy_enter
      on_start = "[PdxGuiWidget.FindChild('newsfeed_type').TriggerAnimation('fade_out')]"
      on_start = "[PdxGuiWidget.FindChild('newsfeed_dismiss').TriggerAnimation('fade_in')]"
    }

    state = {
      name = _mouse_hierarchy_leave
      on_start = "[PdxGuiWidget.FindChild('newsfeed_type').TriggerAnimation('fade_in')]"
      on_start = "[PdxGuiWidget.FindChild('newsfeed_dismiss').TriggerAnimation('fade_out')]"
    }

    newsfeed_type_icon = {
      name = "newsfeed_type"
      using = NewsFeed_Fade_States
    }

    newsfeed_dismiss_button = {
      name = "newsfeed_dismiss"
      alpha = 0
      using = NewsFeed_Fade_States
    }
  }

  type newsfeed_title_area = flowcontainer {
    ignoreinvisible = yes

    text_single = {
      visible = "[Not(EqualTo_string(GetVariableSystem.Get('newsfeed_font_size'), 'large'))]"
      text = "[Scope.GetVariable('newsfeed_message_title').GetFlagName]"
      default_format = "#high"
      fontsize = 14
      align = left|nobaseline
    }

    text_single = {
      visible = "[EqualTo_string(GetVariableSystem.Get('newsfeed_font_size'), 'large')]"
      text = "[Scope.GetVariable('newsfeed_message_title').GetFlagName]"
      default_format = "#high"
      margin_top = -6
      fontsize = 18
    }

    text_single = {
      text = "[Scope.GetVariable('newsfeed_message_date').GetFlagName]"
      default_format = "#weak"
      fontsize = 14
      align = left|nobaseline
      margin_left = 8
    }
  }

  type newsfeed_description_area = flowcontainer {
    margin_right = 10
    ignoreinvisible = yes

    flowcontainer = {
      visible = "[GetVariableSystem.Exists('newsfeed_disable_portraits')]"

      newsfeed_message_desc = {
        minimumsize = { 550 0 }
        blockoverride "width" {
          max_width = 550
        }
      }
    }

    flowcontainer = {
      visible = "[Not(GetVariableSystem.Exists('newsfeed_disable_portraits'))]"

      flowcontainer = {
        visible = "[Scope.GetVariable('newsfeed_message_right_character').GetCharacter.IsValid]"
        ignoreinvisible = yes

        # Two icons
        newsfeed_message_desc = {
          visible = "[Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid]"
          minimumsize = { 430 0 }
          blockoverride "width" {
            max_width = 430
          }
        }
    
        # One icon
        newsfeed_message_desc = {
          visible = "[Not(Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid)]"
          minimumsize = { 490 0 }
          blockoverride "width" {
            max_width = 490
          }
        }
      }

      flowcontainer = {
        visible = "[Not(Scope.GetVariable('newsfeed_message_right_character').GetCharacter.IsValid)]"
        ignoreinvisible = yes

        # One icon
        newsfeed_message_desc = {
          visible = "[Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid]"
          minimumsize = { 490 0 }
          blockoverride "width" {
            max_width = 490
          }
        }
    
        # No icons
        newsfeed_message_desc = {
          visible = "[Not(Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid)]"
          minimumsize = { 550 0 }
          blockoverride "width" {
            max_width = 550
          }
        }
      }
    }
  }

  type newsfeed_portraits = flowcontainer {
    direction = horizontal
    ignoreinvisible = yes

    newsfeed_portrait = {
      name = "portrait_left"
      visible = "[Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid]"
      datacontext = "[Scope.GetVariable('newsfeed_message_left_character').GetCharacter]"
    }

    newsfeed_portrait = {
      name = "portrait_right"
      visible = "[Scope.GetVariable('newsfeed_message_right_character').GetCharacter.IsValid]"
      datacontext = "[Scope.GetVariable('newsfeed_message_right_character').GetCharacter]"
    }
  }

  type newsfeed_portrait = portrait_head_small {
    size = { 60 60 }

    blockoverride "portrait_button" {
      size = { 60 60 }
    }

    blockoverride "coa" {
      coa_realm_tiny = {
        visible = "[Character.HasLandedTitles]"
        parentanchor = bottom|left
        position = { -4 4 }
        scale = 0.85
      }
    }

    blockoverride "status_icons" {
      # empty
    }
  }

  type newsfeed_message_desc = flowcontainer {
    ignoreinvisible = yes

    newsfeed_message_desc_impl = {
      visible = "[Not(EqualTo_string(GetVariableSystem.Get('newsfeed_font_size'), 'large'))]"
      block "width" {}
      fontsize = 14
    }
    newsfeed_message_desc_impl = {
      visible = "[EqualTo_string(GetVariableSystem.Get('newsfeed_font_size'), 'large')]"
      block "width" {}
      fontsize = 16
    }
  }

  type newsfeed_message_desc_impl = text_multi {
    visible = "[EqualTo_string(GetVariableSystem.Get('newsfeed_font_size'), 'large')]"
    block "width" {}
    autoresize = yes
    layoutpolicy_horizontal = expanding
    text = "[Scope.GetVariable('newsfeed_message_desc').GetFlagName]"
    fontsize = 16
    align = left|nobaseline
  }
}

template NewsFeed_Textured_Background {
  using = Background_Area_Dark
}

template NewsFeed_Border_Background {
  using = Background_Area_Dark
  texture_density = 10
}

template NewsFeed_Fade_States {
  state = {
    name = fade_out
    alpha = 0
    duration = 0.2
    using = Animation_Curve_Default
  }

  state = {
    name = fade_in
    alpha = 1
    duration = 0.2
    using = Animation_Curve_Default
  }
}

template NewsFeed_Dim_States {
  alpha = 0.4

  state = {
    name = fade_out
    alpha = 0.4
    duration = 0.2
    using = Animation_Curve_Default
  }

  state = {
    name = fade_in
    alpha = 1
    duration = 0.2
    using = Animation_Curve_Default
  }
}